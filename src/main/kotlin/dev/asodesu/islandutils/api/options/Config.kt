package dev.asodesu.islandutils.api.options

import dev.asodesu.islandutils.api.options.screen.ConfigScreen
import java.io.File
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.put
import net.minecraft.client.gui.screens.Screen
import org.slf4j.LoggerFactory

abstract class Config(val file: File, val fileVersion: String = "2.0.0") {
    private val logger = LoggerFactory.getLogger("IU-Options")
    protected abstract val entries: List<ConfigEntry>

    open fun getScreen(parent: Screen) = ConfigScreen(parent, this, entries)

    fun load() {
        if (!file.exists()) {
            save()
            return logger.error("${file.name} file does not exist, not loading...")
        }
        logger.info("Loading ${file.name} config...")

        val text = file.readText()
        val json = try {
            Json.decodeFromString<JsonObject>(text)
        } catch (e: Exception) {
            logger.error("Failed to load config file", e)
            return
        }

        val versionString = (json["_version"] as? JsonPrimitive)?.toString()
        if (versionString == null || versionString != fileVersion) {
            // TODO: DFU
            logger.info("Config version '$versionString' differs from expected version '$fileVersion'")
        }

        this.entries.forEach { it.load(json) }
        logger.info("Loaded config ${file.name}!")

        // TODO: TESTING
        save()
    }

    fun save() {
        val obj = buildJsonObject {
            put("_", "DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING")
            put("_version", fileVersion)
            entries.forEach { it.save(this) }
        }

        file.writeText(obj.toString())
        logger.info("Saved config!")
    }
}